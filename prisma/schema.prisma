// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  username String         @unique
  password String
  fullname String
  ruangLab UserRuangLab[]
  role     Role           @default(AsistenLab)
  Account  Account[]
  Session  Session[]
}

enum Role {
  KepalaLab
  AsistenLab
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RuangLab {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  nama                String
  jumlahKomputerAktif Int
  jumlahKomputerTotal Int
  asisten             UserRuangLab[]
  jadwal              Jadwal[]
}

model UserRuangLab {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ruangLab   RuangLab @relation(fields: [ruangLabId], references: [id])
  ruangLabId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model Jadwal {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ruangLab   RuangLab @relation(fields: [ruangLabId], references: [id])
  ruangLabId String   @db.ObjectId
  hari       String
  jamMulai   String
  jamSelesai String
  matkul     String
  dosen      String
  urutan     Int
}
